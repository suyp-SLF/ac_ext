package aeac.sys.aeac_basetemple.utils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.EventObject;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import com.alibaba.fastjson.JSONObject;
import kd.bos.bec.util.HttpClientUtil;
import kd.bos.context.RequestContext;
import kd.bos.ext.form.control.CustomControl;
import kd.bos.form.control.Toolbar;
import kd.bos.form.control.events.ItemClickEvent;
import kd.bos.form.plugin.AbstractFormPlugin;
import kd.bos.message.channel.cache.AccessTokenUtils;
import kd.fi.er.business.servicehelper.HttpServiceHelper;

public class ShushengFormPlugin extends AbstractFormPlugin{
	@Override
	public void registerListener(EventObject e) {
	    super.registerListener(e);
	    Toolbar repairDataBtnBar = this.getControl("aeac_toolbarap");
	    repairDataBtnBar.addItemClickListener(this);
	}
	@Override
    public void afterCreateNewData(EventObject e) {
    	// TODO Auto-generated method stub
    	super.afterCreateNewData(e);
    	updateTable("start");
    }
	
	@Override
	public void itemClick(ItemClickEvent evt) {
		
		//获得当前系统的租户id 账户id
		// TODO Auto-generated method stub
		String key = evt.getItemKey();
		super.itemClick(evt);
		updateTable(key);
	}
	
	private void updateTable(String action) {
		String token;
		try {
			token = getAccessToken();
		}catch (Exception e){
			throw new RuntimeException(e.getMessage());
		}

		if("start".equalsIgnoreCase(action)) {
			CustomControl customcontrol = this.getView().getControl("aeac_customcontrolap");
	        Map<String, Object> data = new HashMap<>();
	        
	        String path = this.getView().getFormShowParameter().getCustomParam("filepath");
	        this.getModel().setValue("aeac_path", path);
	        data.put("LOD_path", path + "&access_token=" + token);
	        data.put("LOD_action", "start");
	        data.put("id", UUID.randomUUID());
	        customcontrol.setData(data);
	        
		}else if("aeac_view".equalsIgnoreCase(action)) {
			
			CustomControl customcontrol = this.getView().getControl("aeac_customcontrolap");
	        Map<String, Object> data = new HashMap<>();
	        
	        String path = this.getView().getFormShowParameter().getCustomParam("filepath");
	        this.getModel().setValue("aeac_path", path);
	        data.put("LOD_path", path + "&access_token=" + token);
	        data.put("LOD_action", "view");
	        data.put("id", UUID.randomUUID());
	        customcontrol.setData(data);
		}
	}

	private String getAccessToken() throws Exception{
		Map<String,String> map = new HashMap<>();
//		"appId": "vouchertest",
//				"appSecuret": "Kingdee@123Kingdee@123",
//				"tenantid": "jmup",
//				"accountId": accountID,
//				"language": "zh_CN"
		map.put("appId", "vouchertest");
		map.put("appSecuret", "ZHFzhf!1234567890");
		map.put("tenantid", "cosmic");
		map.put("accountId", RequestContext.get().getAccountId());
		map.put("language", "zh_CN");
		String domain = System.getProperty("domain.contextUrl");
		String request = HttpServiceHelper.doPost(domain + "/api/getAppToken.do", map);

		JSONObject json = JSONObject.parseObject(request);
		String appToken = json.getJSONObject("data").getString("app_token");

		map.clear();
//		user: "cwinterface",
//
//            apptoken: KDAPPTOKEN,
//            tenantid: "jmup ",
//            accountId: accountID,
//            usertype: "UserName"
		map.put("user", "suyoupeng");
		map.put("apptoken", appToken);
		map.put("tenantid", "cosmic");
		map.put("accountId", RequestContext.get().getAccountId());
		map.put("usertype", "UserName");
		request = HttpServiceHelper.doPost(domain + "/api/login.do", map);
		json = JSONObject.parseObject(request);
		String accessToken = json.getJSONObject("data").getString("access_token");
		return accessToken;
	}
}
